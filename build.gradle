plugins {
    id 'java'
    id "io.freefair.lombok" version "6.5.0.3"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'net.insprill'
version '17.0.0-SNAPSHOT-' + getGitRevision()

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.codemc.org/repository/maven-public/' }
    maven { url = 'https://repo.essentialsx.net/releases/' }
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {
    compileOnly fileTree(include: ['*.jar'], dir: 'libs')
    compileOnly 'fr.xephi:authme:5.6.0-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.2'
    compileOnly 'net.essentialsx:EssentialsX:2.19.4'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT'
    compileOnly('com.github.MilkBowl:VaultAPI:1.7.1') { transitive = false }
    compileOnly('com.github.MyzelYam:SuperVanish:6.2.7') { transitive = false }
    implementation 'net.insprill:XenLib:a6942f042e'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
}

shadowJar {
    archiveClassifier.set('')
    archiveVersion.set('')

    var libPackage = "net.insprill.cjm.libs"
    relocate("net.insprill.xenlib", "${libPackage}.net.insprill.xenlib")
    relocate("org.bstats", "${libPackage}.org.bstats")

    minimize()
}
tasks.build.dependsOn tasks.shadowJar

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

static def getGitRevision() {
    return 'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task copyJars() {
    if (new File ("server").exists ()) {
        doLast {
            def servers = ["1.8.8", "1.12.2", "1.18.2"]
            for (def server : servers) {
                copy {
                    from(shadowJar)
                    into("server/" + server + "/plugins")
                }
            }
        }
    }
}
shadowJar.finalizedBy(copyJars)
